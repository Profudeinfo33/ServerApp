{"ast":null,"code":"import { Observable, throwError } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { Status } from '../enum/status.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ServerService = /*#__PURE__*/(() => {\n  class ServerService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:8080';\n      this.servers$ = this.http.get(`${this.apiUrl}/server/list`).pipe(tap(console.log), catchError(this.handleError));\n\n      this.save$ = server => this.http.post(`${this.apiUrl}/server/save`, server).pipe(tap(console.log), catchError(this.handleError));\n\n      this.ping$ = ipAddress => this.http.get(`${this.apiUrl}/server/ping/${ipAddress}`).pipe(tap(console.log), catchError(this.handleError));\n\n      this.filter$ = (status, response) => new Observable(suscriber => {\n        console.log(response);\n        suscriber.next(status === Status.ALL ? Object.assign(Object.assign({}, response), {\n          message: `Servers filtered by ${status} status`\n        }) : Object.assign(Object.assign({}, response), {\n          message: response.data.servers.filter(server => server.status === status).length > 0 ? `Servers filtered by \n          ${status === Status.SERVER_UP ? 'SERVER UP' : 'SERVER DOWN'} status` : `No servers of ${status} found`,\n          data: {\n            servers: response.data.servers.filter(server => server.status === status)\n          }\n        }));\n        suscriber.complete();\n      }).pipe(tap(console.log), catchError(this.handleError));\n\n      this.delete$ = serverId => this.http.delete(`${this.apiUrl}/server/delete/${serverId}`).pipe(tap(console.log), catchError(this.handleError));\n    }\n\n    handleError(error) {\n      console.log(error);\n      return throwError(`An error occurred - Error code: ${error.status}`);\n    }\n\n  }\n\n  ServerService.ɵfac = function ServerService_Factory(t) {\n    return new (t || ServerService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ServerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ServerService,\n    factory: ServerService.ɵfac,\n    providedIn: 'root'\n  });\n  return ServerService;\n})();","map":null,"metadata":{},"sourceType":"module"}